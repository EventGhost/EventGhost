# -*- coding: utf-8 -*-
#
# ***********************************************************************************
# MIT License
#
# Copyright (c) 2020 Kevin G. Schlosser
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# ***********************************************************************************

# Local imports
from . import protocol_base
from . import DecodeError


TIMING = 578


# noinspection PyUnreachableCode
class Grundig16(protocol_base.IrProtocolBase):
    """
    IR decoder for the Grundig16 protocol.
    """
    irp = '{35.7k,578,msb}<-4,2|-3,1,-1,1|-2,1,-2,1|-1,1,-3,1>(806u,-2960u,1346u,T:1,F:8,D:7,-100)*'
    frequency = 35700
    bit_count = 16
    encoding = 'msb'

    _lead_in = [806, -2960, 1346]
    _lead_out = [-TIMING * 100]
    _middle_timings = []
    _bursts = [
        [-TIMING * 4, TIMING * 2],
        [-TIMING * 3, TIMING, -TIMING, TIMING],
        [-TIMING * 2, TIMING, -TIMING * 2, TIMING],
        [-TIMING, TIMING, -TIMING * 3, TIMING]
    ]

    _code_order = [
        ['F', 8],
        ['D', 7]
    ]
    _parameters = [
        ['T', 0, 0],
        ['F', 1, 8],
        ['D', 9, 15]
    ]
    # [D:0..127,F:0..255,T@:0..1=0]
    encode_parameters = [
        ['device', 0, 127],
        ['function', 0, 255],
    ]

    _toggle = 0

    def decode(self, data, frequency=0):
        try:
            original_code = data[:]
            normalized_code = []

            lead_in = data[:3]
            for i, item in enumerate(lead_in):
                if self._match(item, self._lead_in[i]):
                    normalized_code += [self._lead_in[i]]
                else:
                    raise DecodeError('Invalid lead in.')

            if not self._match(data[-1], self._lead_out[0]):
                raise DecodeError('Invalid lead out')

            bits = []
            double_pair = False

            bit_mapping = {
                0: [0, 0],
                1: [0, 1],
                2: [1, 0],
                3: [1, 1]
            }

            for i in range(0, len(data[:-1]), 2):
                mark = data[i]
                space = data[i + 1]

                if double_pair:
                    for j, (_, _, e_mark, e_space) in enumerate(self._bursts[1:]):
                        if self._match(mark, e_mark) and self._match(space, e_space):
                            normalized_code += [e_mark, e_space]
                            bits += bit_mapping[j + 1][:]
                            break
                    else:
                        raise DecodeError('Invalid burst pair')

                    double_pair = False

                else:
                    for j, (e_mark, e_space, _, _) in enumerate(self._bursts):
                        if self._match(mark, e_mark) and self._match(space, e_space):
                            normalized_code += [e_mark, e_space]
                            bits += bit_mapping[j][:]
                            if j != 0:
                                double_pair = True

                            break
                    else:
                        raise DecodeError('Invalid burst pair')

            normalized_code += self._lead_out[:]

            def _get_value(start_bit, stop_bit):
                decoded_bits = bits[start_bit: stop_bit + 1]
                decoded_bits = list(bits[k] for k in range(len(decoded_bits) - 1, -1, -1))

                res = 0
                for k, bit in enumerate(decoded_bits):
                    res = self._set_bit(res, k, bit)

                return res

            if len(bits) > self.bit_count:
                raise DecodeError('To many bits')
            elif len(bits) < self.bit_count:
                raise DecodeError('Not enough bits')

            params = dict(
                frequency=self.frequency
            )

            for param, start, stop in self._parameters:
                params[param] = _get_value(start, stop)

            code = protocol_base.IRCode(
                self,
                original_code,
                normalized_code,
                params
            )

            if self._last_code is not None:
                if (
                    self._last_code == code and
                    code.toggle == self._last_code.toggle
                ):
                    return self._last_code

                self._last_code.repeat_timer.stop()

            self._last_code = code
            return code

        except IndexError:
            raise DecodeError('Invalid code')

    def encode(self, device, function, repeat_count=0):
        self._toggle += 1

        packet = self._build_packet(
            list(self._get_timing(self._toggle, i) for i in range(1)),
            list(self._get_timing(function, i) for i in range(8)),
            list(self._get_timing(device, i) for i in range(7)),
        )

        params = dict(
            frequency=self.frequency,
            F=function,
            D=device
        )

        code = protocol_base.IRCode(
            self,
            [packet],
            [packet] * (repeat_count + 1),
            params,
            repeat_count=repeat_count
        )
        return code

    # noinspection PyMethodOverriding
    def _test_decode(self):
        return
        rlc = [[
            806, -2960, 1346, -578, 578, -1734, 578, -2312, 1156, -2312, 1156, -1734, 578, -578, 578, -1156,
            578, -1156, 578, -1734, 578, -578, 578, -1734, 578, -578, 578, -1734, 578, -578, 578, -57800
        ]]

        params = [dict(device=21, function=131, toggle=1)]
        return protocol_base.IrProtocolBase._test_decode(self, rlc, params)

    # noinspection PyMethodOverriding
    def _test_encode(self):
        return
        params = dict(device=21, function=131, toggle=1)
        protocol_base.IrProtocolBase._test_encode(self, params)


Grundig16 = Grundig16()
