# -*- coding: utf-8 -*-
#
# ***********************************************************************************
# MIT License
#
# Copyright (c) 2020 Kevin G. Schlosser
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# ***********************************************************************************

# Local imports
from . import tdc38
from . import protocol_base


TIMING = 213


class TDC56(tdc38.TDC38.__class__):
    """
    IR decoder for the TDC56 protocol.
    """
    irp = '{56.3k,213,msb}<-1,1|1,-1>(1,-1,D:5,S:5,F:7,-89m)*'
    frequency = 56300

    _lead_in = [TIMING, -TIMING]
    _bursts = [[-TIMING, TIMING], [TIMING, -TIMING]]

    # noinspection PyMethodOverriding
    def _test_decode(self):
        rlc = [
            [
                +213, -426, +213, -213, +426, -213, +213, -213, +213, -426, +213, -213, +213, -213, +426, -426,
                +426, -213, +213, -213, +213, -426, +213, -213, +426, -213, +213, -89213
            ]
        ]

        params = [dict(function=115, sub_device=2, device=7)]

        # noinspection PyTypeChecker,PyCallByClass,PyProtectedMember
        return protocol_base.IrProtocolBase._test_decode(self, rlc, params)


TDC56 = TDC56()
