# -*- coding: utf-8 -*-
#
# ***********************************************************************************
# MIT License
#
# Copyright (c) 2020 Kevin G. Schlosser
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# ***********************************************************************************

# Local imports
from . import protocol_base
from . import DecodeError


TIMING = 310


# TODO: finish
# noinspection PyUnreachableCode
class Sejin138(protocol_base.IrProtocolBase):
    """
    IR decoder for the Sejin138 protocol.
    """
    irp = (
        '{38.8k,310,msb}<-1|1>(<8,4|4,4|2,4|1,4>(3,3:2,D:8,F:8,S:8,E:4,C:4,-77))*'
        '{C=(D:4)+(D:4:4)+(F:4)+(F:4:4)+(S:4)+(S:4:4)+E}'
    )
    frequency = 38800
    bit_count = 48
    encoding = 'msb'

    _lead_in = [TIMING * 3]
    _lead_out = [TIMING, 108000]
    _middle_timings = []
    _bursts = [[TIMING, -TIMING], [TIMING, -TIMING * 3], [TIMING, -TIMING], [TIMING, -TIMING * 3]]

    _repeat_lead_in = []
    _repeat_lead_out = []
    _repeat_bursts = []

    _code_order = [
        ['D', 8],
        ['S', 8],
        ['F', 8],
        ['E', 8]
    ]

    _parameters = [
        ['D', 0, 7],
        ['S', 8, 15],
        ['F', 16, 23],
        ['F_CHECKSUM', 24, 31],
        ['E', 32, 39],
        ['E_CHECKSUM', 40, 47]
    ]
    # [D:0..255,S:0..255,F:0..255,E:0..15=0]
    encode_parameters = [
        ['device', 0, 255],
        ['sub_device', 0, 255],
        ['function', 0, 255],
        ['extended_function', 0, 15]
    ]

    @property
    def enabled(self):
        return False

    @enabled.setter
    def enabled(self, value):
        pass

    def _calc_checksum(self, device, sub_device, function, extended_function):
        # {C=(D:4)+(D:4:4)+(F:4)+(F:4:4)+(S:4)+(S:4:4)+E}
        d1 = self._get_bits(device, 0, 3)
        d2 = self._get_bits(device, 4, 7)
        f1 = self._get_bits(function, 0, 3)
        f2 = self._get_bits(function, 4, 7)
        s1 = self._get_bits(sub_device, 0, 3)
        s2 = self._get_bits(sub_device, 4, 7)

        return self._get_bits(d1 + d2 + f1 + f2 + s1 + s2 + extended_function, 0, 3)

    def decode(self, data, frequency=0):
        raise DecodeError

        code = protocol_base.IrProtocolBase.decode(self, data, frequency)
        func_checksum, e_checksum = self._calc_checksum(code.function, code.e)

        if func_checksum != code.f_checksum or e_checksum != code.e_checksum:
            raise DecodeError('Checksum failed')

        return code

    def encode(self, device, sub_device, function, extended_function):
        raise NotImplementedError
        func_checksum, ex_func_checksum = self._calc_checksum(
            function,
            extended_function
        )

        list(self._get_timing(device, i) for i in range(8)),
        list(self._get_timing(sub_device, i) for i in range(8)),
        list(self._get_timing(function, i) for i in range(8)),
        list(self._get_timing(e, i) for i in range(8)),
        list(self._get_timing(func_checksum, i) for i in range(8)),
        list(self._get_timing(ex_func_checksum, i) for i in range(8)),

        packet = self._build_packet(
            encoded_dev,
            encoded_sub,
            encoded_func,
            encoded_func_check,
            encoded_e,
            encoded_ex_func_check
        )

        return self.decode(packet, self.frequency)

    # noinspection PyMethodOverriding
    def _test_decode(self):
        raise NotImplementedError

        rlc = [
            930, -930, 620, -1860, 310, -310, 310, -930, 310, -620, 310, -930, 310, -930,
            310, -1550, 310, -930, 310, -930, 310, -620, 310, -930, 310, -930, 310, -1550,
            620, -930, 310, -24800,
        ]

        params = dict(function=2, sub_device=165, device=53, extended_function=7)

        return protocol_base.IrProtocolBase._test_decode(self, rlc, params)

    # noinspection PyMethodOverriding
    def _test_encode(self):
        raise NotImplementedError

        params = dict(function=2, sub_device=165, device=53, extended_function=7)
        protocol_base.IrProtocolBase._test_encode(self, params)


Sejin138 = Sejin138()
