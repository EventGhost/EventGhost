# -*- coding: utf-8 -*-
#
# ***********************************************************************************
# MIT License
#
# Copyright (c) 2020 Kevin G. Schlosser
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# ***********************************************************************************

# Local imports
from . import protocol_base
from . import RepeatLeadIn


TIMING = 600


class Sony12(protocol_base.IrProtocolBase):
    """
    IR decoder for the Sony12 protocol.
    """
    irp = '{40k,600,lsb}<1,-1|2,-1>(4,-1,F:7,D:5,^45m)*'
    frequency = 40000
    bit_count = 12
    encoding = 'lsb'

    _lead_in = [TIMING * 4, -TIMING]
    _lead_out = [45000]
    _bursts = [[TIMING, -TIMING], [TIMING * 2, -TIMING]]

    _code_order = [
        ['F', 7],
        ['D', 5],
    ]

    _parameters = [
        ['F', 0, 6],
        ['D', 7, 11],
    ]
    # [D:0..31,F:0..127]
    encode_parameters = [
        ['device', 0, 31],
        ['function', 0, 127],
    ]

    repeat_timeout = 45000 * 3
    _code_count = 0

    def decode(self, data, frequency=0):
        code = protocol_base.IrProtocolBase.decode(self, data, frequency)

        if self._last_code is not None:
            if self._last_code == code:
                self._code_count += 1

                if self._code_count < 2:
                    raise RepeatLeadIn

                self._code_count = -1
                return self._last_code

            self._last_code.repeat_timer.stop()

        self._code_count = 0
        self._last_code = code

        code._original_rlc = [code._original_rlc[0]] * 3
        code._normalized_rlc = [code._normalized_rlc[0]] * 3

        return code

    def encode(self, device, function, repeat_count=0):
        packet = self._build_packet(
            list(self._get_timing(function, i) for i in range(7)),
            list(self._get_timing(device, i) for i in range(5))
        )

        params = dict(
            frequency=self.frequency,
            D=device,
            F=function,
        )

        code = protocol_base.IRCode(
            self,
            [packet[:]],
            [packet[:]] * (repeat_count + 1),
            params,
            repeat_count
        )

        return code

    # noinspection PyMethodOverriding
    def _test_decode(self):
        rlc = [[
            2400, -600, 1200, -600, 600, -600, 1200, -600, 1200, -600, 600, -600, 600, -600,
            600, -600, 1200, -600, 600, -600, 1200, -600, 1200, -600, 600, -24600,
        ]]

        params = [dict(device=13, function=13)]

        return protocol_base.IrProtocolBase._test_decode(self, rlc, params)

    # noinspection PyMethodOverriding
    def _test_encode(self):
        params = dict(device=13, function=13)
        protocol_base.IrProtocolBase._test_encode(self, params)


Sony12 = Sony12()
