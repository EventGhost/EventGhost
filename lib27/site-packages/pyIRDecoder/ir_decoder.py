# -*- coding: utf-8 -*-
#
# ***********************************************************************************
# MIT License
#
# Copyright (c) 2020 Kevin G. Schlosser
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is furnished
# to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# ***********************************************************************************


from collections import deque
import threading
from . import high_precision_timers
from . import thread_worker
from . import protocol_base
from .config import Config
from . import (
    DecodeError,
    RepeatLeadIn,
    RepeatLeadOut,
    RepeatTimeoutExpired
)

from .ad_notham import AdNotham
from .aiwa import Aiwa
from .akai import Akai
from .akord import Akord
from .amino import Amino
from .amino56 import Amino56
from .anthem import Anthem
from .apple import Apple
from .archer import Archer
from .arctech import Arctech
from .arctech38 import Arctech38
from .audiovox import Audiovox
from .barco import Barco
from .blaupunkt import Blaupunkt
from .bose import Bose
from .bryston import Bryston
from .canalsat import CanalSat
from .canalsatld import CanalSatLD
from .denon import Denon
from .denon_k import DenonK
from .dgtec import Dgtec
from .digivision import Digivision
from .directv import DirecTV
from .directv0 import DirecTV0
from .directv1 import DirecTV1
from .directv2 import DirecTV2
from .directv3 import DirecTV3
from .directv4 import DirecTV4
from .directv5 import DirecTV5
from .dishnetwork import DishNetwork
from .dishplayer import DishPlayer
from .dyson import Dyson
from .dyson2 import Dyson2
from .elan import Elan
from .elunevision import Elunevision
from .emerson import Emerson
from .entone import Entone
from .f12 import F12
from .f120 import F120
from .f121 import F121
from .f32 import F32
from .fujitsu import Fujitsu
from .fujitsu128 import Fujitsu128
from .fujitsu56 import Fujitsu56
from .gi4dtv import GI4DTV
from .gicable import GICable
from .girg import GIRG
from .grundig16 import Grundig16
from .grundig1630 import Grundig1630
from .guangzhou import GuangZhou
from .gwts import GwtS
from .gxb import GXB
from .humax4phase import Humax4Phase
from .intervideorc201 import InterVideoRC201
from .iodatan import IODATAn
from .jerrold import Jerrold
from .jvc import JVC
from .jvc48 import JVC48
from .jvc56 import JVC56
from .kaseikyo import Kaseikyo
from .kaseikyo56 import Kaseikyo56
from .kathrein import Kathrein
from .konka import Konka
from .logitech import Logitech
from .lumagen import Lumagen
from .lutron import Lutron
from .matsui import Matsui
from .mce import MCE
from .mcir2kbd import MCIR2kbd
from .mcir2mouse import MCIR2mouse
from .metz19 import Metz19
from .mitsubishi import Mitsubishi
from .mitsubishik import MitsubishiK
from .motorola import Motorola
from .nec import NEC
from .nec48 import NEC48
from .necf16 import NECf16
from .necrnc import NECrnc
from .necx import NECx
from .necxf16 import NECxf16
from .nokia import Nokia
from .nokia12 import Nokia12
from .nokia32 import Nokia32
from .novapace import NovaPace
from .nrc16 import NRC16
from .nrc1632 import NRC1632
from .nrc17 import NRC17
from .ortek import Ortek
from .ortekmce import OrtekMCE
from .pacemss import PaceMSS
from .panasonic import Panasonic
from .panasonic2 import Panasonic2
from .panasonicold import PanasonicOld
from .pctv import PCTV
from .pid0001 import PID0001
from .pid0003 import PID0003
from .pid0004 import PID0004
from .pid0083 import PID0083
from .pioneer import Pioneer
from .proton import Proton
from .proton40 import Proton40
from .rc5 import RC5
from .rc57f import RC57F
from .rc57f57 import RC57F57
from .rc5x import RC5x
from .rc6 import RC6
from .rc6620 import RC6620
from .rc6624 import RC6624
from .rc6632 import RC6632
from .rc6m16 import RC6M16
from .rc6m28 import RC6M28
from .rc6m32 import RC6M32
from .rc6m56 import RC6M56
from .rc6mbit import RC6MBIT
from .rca import RCA
from .rca38 import RCA38
from .rca38old import RCA38Old
from .rcaold import RCAOld
from .recs800045 import RECS800045
from .recs800068 import RECS800068
from .recs800090 import RECS800090
from .revox import Revox
from .roku import Roku
from .rs200 import Rs200
from .rti_relay import RTIRelay
from .sampo import Sampo
from .samsung20 import Samsung20
from .samsung36 import Samsung36
from .samsungsmtg import SamsungSMTG
from .scatl6 import ScAtl6
from .sejin138 import Sejin138
from .sejin156 import Sejin156
from .sharp import Sharp
from .sharp1 import Sharp1
from .sharp2 import Sharp2
from .sharpdvd import SharpDVD
from .sim2 import SIM2
from .sky import Sky
from .sky_hd import SkyHD
from .sky_plus import SkyPlus
from .somfy import Somfy
from .sony12 import Sony12
from .sony15 import Sony15
from .sony20 import Sony20
from .sony8 import Sony8
from .streamzap import StreamZap
from .streamzap57 import StreamZap57
from .sunfire import Sunfire
from .tdc38 import TDC38
from .tdc56 import TDC56
from .teack import TeacK
from .thomson import Thomson
from .thomson7 import Thomson7
from .tivo import Tivo
from .universal import Universal
from .velleman import Velleman
from .viewstar import Viewstar
from .whynter import Whynter
from .xbox_360 import XBox360
from .xbox_one import XBoxOne
from .zaptor36 import Zaptor36
from .zaptor56 import Zaptor56

_DECODERS = [
    AdNotham,
    Aiwa,
    Akai,
    Akord,
    Amino,
    Amino56,
    Anthem,
    Apple,
    Archer,
    Arctech,
    Arctech38,
    Barco,
    Blaupunkt,
    Bose,
    Bryston,
    CanalSat,
    CanalSatLD,
    Denon,
    DenonK,
    Dgtec,
    Digivision,
    DirecTV,
    DirecTV0,
    DirecTV1,
    DirecTV2,
    DirecTV3,
    DirecTV4,
    DirecTV5,
    DishNetwork,
    DishPlayer,
    Dyson,
    Dyson2,
    Elan,
    Elunevision,
    Emerson,
    Entone,
    F12,
    F121,
    F120,
    F32,
    Fujitsu,
    Fujitsu128,
    Fujitsu56,
    GI4DTV,
    GICable,
    GIRG,
    Grundig16,
    Grundig1630,
    GuangZhou,
    GwtS,
    GXB,
    Humax4Phase,
    InterVideoRC201,
    IODATAn,
    Jerrold,
    JVC,
    JVC48,
    JVC56,
    Kathrein,
    Konka,
    Logitech,
    Lumagen,
    Lutron,
    Matsui,
    MCE,
    MCIR2kbd,
    MCIR2mouse,
    Metz19,
    Mitsubishi,
    MitsubishiK,
    Motorola,
    NECrnc,
    NEC,
    NEC48,
    NECf16,
    Nokia,
    Nokia12,
    Nokia32,
    NovaPace,
    NRC16,
    NRC1632,
    NRC17,
    Ortek,
    OrtekMCE,
    PaceMSS,
    Panasonic,
    Kaseikyo,
    Panasonic2,
    Kaseikyo56,
    PanasonicOld,
    PCTV,
    PID0001,
    PID0003,
    PID0004,
    PID0083,
    Pioneer,
    Proton,
    Proton40,
    Audiovox,
    RC5,
    RC6,
    RC6624,
    RC6632,
    RC6M16,
    RC6M28,
    RC6M32,
    RC6M56,
    RCA,
    RCA38,
    RCA38Old,
    RCAOld,
    # RCMM,
    RECS800045,
    RECS800068,
    RECS800090,
    Revox,
    Roku,
    RTIRelay,
    Sampo,
    Samsung20,
    Samsung36,
    SamsungSMTG,
    ScAtl6,
    Sejin138,
    Sejin156,
    Sharp,
    Sharp1,
    Sharp2,
    SharpDVD,
    SIM2,
    Sky,
    SkyHD,
    SkyPlus,
    RC6620,
    Somfy,
    Sony12,
    Sony15,
    Sony20,
    Sony8,
    Sunfire,
    TDC38,
    TDC56,
    TeacK,
    Thomson,
    Thomson7,
    Tivo,
    Velleman,
    Viewstar,
    Whynter,
    Zaptor36,
    Zaptor56,
    XBox360,
    XBoxOne,
    NECx,
    NECxf16,
    RC5x,
    Rs200,
    RC57F,
    RC57F57,
    StreamZap,
    StreamZap57,
    RC6MBIT
]

_process_threadworker = thread_worker.ProcessThreadWorker()


class DecodeThread(threading.Thread):

    def __init__(self, decoder):
        self.decoder = decoder
        self.stop_event = threading.Event()
        self.buffer_event = threading.Event()
        self.buffer_lock = threading.Lock()
        self.decode_universal = False
        self.buffer = deque()
        self.my_timer = high_precision_timers.TimerUS()

        threading.Thread.__init__(self)

    def append(self, data, frequency):
        if frequency == 0:
            burst_count = len(data) / 2.0
            frequency = abs(int((10.0 * sum(item for item in data)) / burst_count))

        if frequency < 20000:
            burst_count = len(data) / 2.0
            frequency = int(round(((burst_count / sum(abs(item) for item in data if item > 0)) * 2) * 11000000))

        if frequency < 29000:
            frequency = 0

        self.my_timer.reset()

        with self.buffer_lock:
            self.buffer.append((data, frequency))

        self.buffer_event.set()

    @property
    def next_buffer_data(self):
        with self.buffer_lock:
            buf = []
            frequency = 0
            while self.buffer:
                b, f = self.buffer.popleft()
                if frequency != 0 and frequency != f != 0:
                    self.buffer.appendleft((b, f))
                    break

                if len(buf) >= len(b) and buf[:len(buf)] == b:
                    self.buffer.appendleft((b, f))
                    break

                frequency = f
                buf += b

            return buf, frequency

    def run(self):
        while not self.stop_event.is_set():
            if self.decode_universal:
                self.buffer_event.wait(0.15)
                if self.buffer_event.is_set():
                    self.decode_universal = False
                    continue

                buf, frequency = self.next_buffer_data

                if len(buf) > 6:
                    # noinspection PyProtectedMember
                    self.decoder._decode_universal(buf, frequency)

                self.decode_universal = False
                continue

            else:
                self.buffer_event.wait()

            self.buffer_event.clear()
            buf, frequency = self.next_buffer_data

            tmp_buf = []
            while buf:
                tmp_buf += [buf.pop(0)]
                if len(tmp_buf) > 3 and tmp_buf[-1] < -2000:
                    # noinspection PyProtectedMember
                    if self.decoder._decode(tmp_buf[:], frequency):
                        del tmp_buf[:]

            if tmp_buf:
                self.buffer.appendleft((tmp_buf, frequency))
                self.decode_universal = True
            else:
                self.decode_universal = False

    def stop(self):
        if self.is_alive():
            self.stop_event.set()
            self.buffer_event.set()
            self.join()


# noinspection PyBroadException,PyPep8Naming
class IRDecoder(object):
    def __init__(self, config=None):
        if config is None:
            config = Config()

        config._parent = self

        self.__config = config
        self.__decoders = deque()
        self.__last_code = None
        self.__last_decoder = None
        self.__timer = high_precision_timers.TimerUS()
        self.__running = False
        self.__repeat_code_lock = threading.Lock()
        self.__decode_thread = None
        self.__decode_callback = None

        for i, decoder in enumerate(_DECODERS):
            for decoder_xml in self.__config:
                if decoder.name == decoder_xml.name:
                    self.__decoders.append(protocol_base.IrProtocolBase(self, decoder_xml))
                    break
            else:
                decoder = decoder(self)
                self.__decoders.append(decoder)
                decoder_xml = decoder.xml
                self.__config.append(decoder_xml)

    def bind_callback(self, callback):
        self.__decode_callback = callback

    def unbind_callback(self):
        self.__decode_callback = None

    def _decode_universal(self, rlc, frequency):
        if len(rlc) < 6:
            return False

        self.__timer.reset()
        with self.__repeat_code_lock:
            for code in self.Universal.decode(rlc, frequency):
                if self.__last_code is not None:
                    if self.__last_code == code:
                        self.__last_code.repeat_timer.start(self.__timer)

                        if self.__decode_callback is not None:
                            _process_threadworker.add(self.__decode_callback, self.__last_code)

                    self.__last_code.repeat_timer.stop()

                code.bind_released_callback(self.__reset_last_code)
                self.__last_code = code
                code.repeat_timer.start(self.__timer)

                if self.__decode_callback is not None:
                    _process_threadworker.add(self.__decode_callback, self.__last_code)

                self.__timer.reset()

            return True

    def close(self):
        if self.__decode_thread is not None:
            self.__decode_thread.stop()
            self.__decode_thread = None
        try:
            self.config.save()
        except:
            pass

    @property
    def config(self):
        return self.__config

    def __iter__(self):
        for decoder in self.__decoders:
            yield decoder

    def get_code_name(self, code):
        if self.__config.database_url:
            import requests
            try:
                response = requests.get(self.__config.database_url)
                if response.status_code != 200:
                    raise requests.ConnectionError
            except requests.ConnectionError:
                pass
            else:
                token = response.content
                response = requests.get(
                    self.__config.database_url + '/' + token + '/get_name',
                    params=dict(id=code.hexdecimal)
                )

                if response.status_code == 200:
                    code.name = response.content

    @property
    def last_used_decoder(self):
        return self.__last_decoder

    def __reset_last_code(self, code):
        with self.__repeat_code_lock:
            if code == self.__last_code:
                if code.repeat_timer.is_running:
                    return

                self.__last_code = None

            code.unbind_released_callback(self.__reset_last_code)

    def _decode(self, data, frequency):
        self.__timer.reset()

        if frequency == 0:
            possible_decoders = list(decoder for decoder in self.__decoders if decoder.enabled)
        else:
            possible_decoders = list(
                decoder for decoder in self.__decoders
                if decoder.enabled and decoder.frequency_match(frequency)
            )

        with self.__repeat_code_lock:
            if self.__last_code is not None and self.__last_code.decoder in possible_decoders:
                if data == self.__last_code:
                    self.__last_code.repeat_timer.start(self.__timer)
                    if self.__decode_callback is not None:
                        _process_threadworker.add(self.__decode_callback, self.__last_code)

                    return True

                try:
                    code = self.__last_code.decoder.decode(data, frequency)
                    if code != self.__last_code:
                        self.__last_code = code

                    self.__last_code.repeat_timer.start(self.__timer)

                    if self.__decode_callback is not None:
                        _process_threadworker.add(self.__decode_callback, self.__last_code)

                    return True

                except DecodeError:
                    pass
                except RepeatLeadIn:
                    self.__last_decoder = self.__last_code.decoder
                    return True

                except (RepeatLeadOut, RepeatTimeoutExpired):
                    return True

            elif self.__last_decoder is not None and self.__last_decoder in possible_decoders:
                try:
                    code = self.__last_decoder.decode(data, frequency)
                    if code != self.__last_code:
                        self.__last_code = code

                    self.__last_code.repeat_timer.start(self.__timer)

                    if self.__decode_callback is not None:
                        _process_threadworker.add(self.__decode_callback, self.__last_code)

                    return True

                except DecodeError:
                    pass
                except RepeatLeadIn:
                    self.__last_decoder = self.__last_code.decoder
                    return True
                except (RepeatLeadOut, RepeatTimeoutExpired):
                    return True

            for decoder in possible_decoders:
                for code in decoder:
                    if code == data:
                        # noinspection PyProtectedMember
                        if decoder._last_code is not None:
                            # noinspection PyProtectedMember
                            decoder._last_code.repeat_timer.stop()
                        break

                else:
                    try:
                        code = decoder.decode(data, frequency)
                    except DecodeError:
                        if decoder == self.NEC:
                            import traceback
                            traceback.print_exc()
                        continue

                    except RepeatLeadIn:
                        self.__last_decoder = decoder
                        return True

                    except (RepeatLeadOut, RepeatTimeoutExpired):
                        return True

                code.bind_released_callback(self.__reset_last_code)
                self.__last_decoder = decoder
                self.__last_code = code
                code.repeat_timer.start(self.__timer)

                if self.__decode_callback is not None:
                    _process_threadworker.add(self.__decode_callback, self.__last_code)

                return True

    def decode(self, data, frequency=0):
        if not data:
            return

        if isinstance(data, protocol_base.IRCode):
            frequency = data.frequency
            data = [item for sublist in data for item in sublist]

        elif isinstance(data, tuple):
            data = list(data)

        elif not isinstance(data, list):
            try:
                from . import pronto
                frequency, data = pronto.pronto_to_rlc(data)
                data = [item for sublist in data for item in sublist]
            except:
                try:
                    data = [int(ord(x)) for x in data]
                except:
                    data = [int(x) for x in data]

        code = self._decode(data, frequency)
        if code is True:
            return None

        return code

    def stream_decode(self, data, frequency=0):
        if not data:
            return

        if self.__decode_thread is None:
            self.__decode_thread = DecodeThread(self)
            self.__decode_thread.start()

        if isinstance(data, protocol_base.IRCode):
            frequency = data.frequency
            data = [item for sublist in data for item in sublist]

        elif isinstance(data, tuple):
            data = list(data)

        elif not isinstance(data, list):
            try:
                from . import pronto
                frequency, data = pronto.pronto_to_rlc(data)
                data = [item for sublist in data for item in sublist]
            except:
                try:
                    data = [int(ord(x)) for x in data]
                except:
                    data = [int(x) for x in data]

        self.__decode_thread.append(data, frequency)

    @property
    def enabled_decoders(self):
        res = []

        for decoder in self:
            if decoder.enabled:
                res += [decoder.name]

        return res

    @property
    def disabled_decoders(self):
        res = []

        for decoder in self:
            if not decoder.enabled:
                res += [decoder.name]

        return res

    def __get_decoder(self, cls):
        for decoder in self:
            if decoder.name == cls.name:
                return decoder

    @property
    def Universal(self):
        return Universal

    @property
    def AdNotham(self):
        return self.__get_decoder(AdNotham)

    @property
    def Aiwa(self):
        return self.__get_decoder(Aiwa)

    @property
    def Akai(self):
        return self.__get_decoder(Akai)

    @property
    def Akord(self):
        return self.__get_decoder(Akord)

    @property
    def Amino(self):
        return self.__get_decoder(Amino)

    @property
    def Amino56(self):
        return self.__get_decoder(Amino56)

    @property
    def Anthem(self):
        return self.__get_decoder(Anthem)

    @property
    def Apple(self):
        return self.__get_decoder(Apple)

    @property
    def Archer(self):
        return self.__get_decoder(Archer)

    @property
    def Arctech(self):
        return self.__get_decoder(Arctech)

    @property
    def Arctech38(self):
        return self.__get_decoder(Arctech38)

    @property
    def Audiovox(self):
        return self.__get_decoder(Audiovox)

    @property
    def Barco(self):
        return self.__get_decoder(Barco)

    @property
    def Blaupunkt(self):
        return self.__get_decoder(Blaupunkt)

    @property
    def Bose(self):
        return self.__get_decoder(Bose)

    @property
    def Bryston(self):
        return self.__get_decoder(Bryston)

    @property
    def CanalSat(self):
        return self.__get_decoder(CanalSat)

    @property
    def CanalSatLD(self):
        return self.__get_decoder(CanalSatLD)

    @property
    def Denon(self):
        return self.__get_decoder(Denon)

    @property
    def DenonK(self):
        return self.__get_decoder(DenonK)

    @property
    def Dgtec(self):
        return self.__get_decoder(Dgtec)

    @property
    def Digivision(self):
        return self.__get_decoder(Digivision)

    @property
    def DirecTV(self):
        return self.__get_decoder(DirecTV)

    @property
    def DirecTV0(self):
        return self.__get_decoder(DirecTV0)

    @property
    def DirecTV1(self):
        return self.__get_decoder(DirecTV1)

    @property
    def DirecTV2(self):
        return self.__get_decoder(DirecTV2)

    @property
    def DirecTV3(self):
        return self.__get_decoder(DirecTV3)

    @property
    def DirecTV4(self):
        return self.__get_decoder(DirecTV4)

    @property
    def DirecTV5(self):
        return self.__get_decoder(DirecTV5)

    @property
    def DishNetwork(self):
        return self.__get_decoder(DishNetwork)

    @property
    def DishPlayer(self):
        return self.__get_decoder(DishPlayer)

    @property
    def Dyson(self):
        return self.__get_decoder(Dyson)

    @property
    def Dyson2(self):
        return self.__get_decoder(Dyson2)

    @property
    def Elan(self):
        return self.__get_decoder(Elan)

    @property
    def Elunevision(self):
        return self.__get_decoder(Elunevision)

    @property
    def Emerson(self):
        return self.__get_decoder(Emerson)

    @property
    def Entone(self):
        return self.__get_decoder(Entone)

    @property
    def F12(self):
        return self.__get_decoder(F12)

    @property
    def F120(self):
        return self.__get_decoder(F120)

    @property
    def F121(self):
        return self.__get_decoder(F121)

    @property
    def F32(self):
        return self.__get_decoder(F32)

    @property
    def Fujitsu(self):
        return self.__get_decoder(Fujitsu)

    @property
    def Fujitsu128(self):
        return self.__get_decoder(Fujitsu128)

    @property
    def Fujitsu56(self):
        return self.__get_decoder(Fujitsu56)

    @property
    def GI4DTV(self):
        return self.__get_decoder(GI4DTV)

    @property
    def GICable(self):
        return self.__get_decoder(GICable)

    @property
    def GIRG(self):
        return self.__get_decoder(GIRG)

    @property
    def Grundig16(self):
        return self.__get_decoder(Grundig16)

    @property
    def Grundig1630(self):
        return self.__get_decoder(Grundig1630)

    @property
    def GuangZhou(self):
        return self.__get_decoder(GuangZhou)

    @property
    def GwtS(self):
        return self.__get_decoder(GwtS)

    @property
    def GXB(self):
        return self.__get_decoder(GXB)

    @property
    def Humax4Phase(self):
        return self.__get_decoder(Humax4Phase)

    @property
    def InterVideoRC201(self):
        return self.__get_decoder(InterVideoRC201)

    @property
    def IODATAn(self):
        return self.__get_decoder(IODATAn)

    @property
    def Jerrold(self):
        return self.__get_decoder(Jerrold)

    @property
    def JVC(self):
        return self.__get_decoder(JVC)

    @property
    def JVC48(self):
        return self.__get_decoder(JVC48)

    @property
    def JVC56(self):
        return self.__get_decoder(JVC56)

    @property
    def Kaseikyo(self):
        return self.__get_decoder(Kaseikyo)

    @property
    def Kaseikyo56(self):
        return self.__get_decoder(Kaseikyo56)

    @property
    def Kathrein(self):
        return self.__get_decoder(Kathrein)

    @property
    def Konka(self):
        return self.__get_decoder(Konka)

    @property
    def Logitech(self):
        return self.__get_decoder(Logitech)

    @property
    def Lumagen(self):
        return self.__get_decoder(Lumagen)

    @property
    def Lutron(self):
        return self.__get_decoder(Lutron)

    @property
    def Matsui(self):
        return self.__get_decoder(Matsui)

    @property
    def MCE(self):
        return self.__get_decoder(MCE)

    @property
    def MCIR2kbd(self):
        return self.__get_decoder(MCIR2kbd)

    @property
    def MCIR2mouse(self):
        return self.__get_decoder(MCIR2mouse)

    @property
    def Metz19(self):
        return self.__get_decoder(Metz19)

    @property
    def Mitsubishi(self):
        return self.__get_decoder(Mitsubishi)

    @property
    def MitsubishiK(self):
        return self.__get_decoder(MitsubishiK)

    @property
    def Motorola(self):
        return self.__get_decoder(Motorola)

    @property
    def NEC(self):
        return self.__get_decoder(NEC)

    @property
    def NEC48(self):
        return self.__get_decoder(NEC48)

    @property
    def NECf16(self):
        return self.__get_decoder(NECf16)

    @property
    def NECrnc(self):
        return self.__get_decoder(NECrnc)

    @property
    def NECx(self):
        return self.__get_decoder(NECx)

    @property
    def NECxf16(self):
        return self.__get_decoder(NECxf16)

    @property
    def Nokia(self):
        return self.__get_decoder(Nokia)

    @property
    def Nokia12(self):
        return self.__get_decoder(Nokia12)

    @property
    def Nokia32(self):
        return self.__get_decoder(Nokia32)

    @property
    def NovaPace(self):
        return self.__get_decoder(NovaPace)

    @property
    def NRC16(self):
        return self.__get_decoder(NRC16)

    @property
    def NRC1632(self):
        return self.__get_decoder(NRC1632)

    @property
    def NRC17(self):
        return self.__get_decoder(NRC17)

    @property
    def Ortek(self):
        return self.__get_decoder(Ortek)

    @property
    def OrtekMCE(self):
        return self.__get_decoder(OrtekMCE)

    @property
    def PaceMSS(self):
        return self.__get_decoder(PaceMSS)

    @property
    def Panasonic(self):
        return self.__get_decoder(Panasonic)

    @property
    def Panasonic2(self):
        return self.__get_decoder(Panasonic2)

    @property
    def PanasonicOld(self):
        return self.__get_decoder(PanasonicOld)

    @property
    def PCTV(self):
        return self.__get_decoder(PCTV)

    @property
    def PID0001(self):
        return self.__get_decoder(PID0001)

    @property
    def PID0003(self):
        return self.__get_decoder(PID0003)

    @property
    def PID0004(self):
        return self.__get_decoder(PID0004)

    @property
    def PID0083(self):
        return self.__get_decoder(PID0083)

    @property
    def Pioneer(self):
        return self.__get_decoder(Pioneer)

    @property
    def Proton(self):
        return self.__get_decoder(Proton)

    @property
    def Proton40(self):
        return self.__get_decoder(Proton40)

    @property
    def RC5(self):
        return self.__get_decoder(RC5)

    @property
    def RC57F(self):
        return self.__get_decoder(RC57F)

    @property
    def RC57F57(self):
        return self.__get_decoder(RC57F57)

    @property
    def RC5x(self):
        return self.__get_decoder(RC5x)

    @property
    def RC6(self):
        return self.__get_decoder(RC6)

    @property
    def RC6620(self):
        return self.__get_decoder(RC6620)

    @property
    def RC6624(self):
        return self.__get_decoder(RC6624)

    @property
    def RC6632(self):
        return self.__get_decoder(RC6632)

    @property
    def RC6M16(self):
        return self.__get_decoder(RC6M16)

    @property
    def RC6M28(self):
        return self.__get_decoder(RC6M28)

    @property
    def RC6M32(self):
        return self.__get_decoder(RC6M32)

    @property
    def RC6M56(self):
        return self.__get_decoder(RC6M56)

    @property
    def RC6MBIT(self):
        return self.__get_decoder(RC6MBIT)

    @property
    def RCA(self):
        return self.__get_decoder(RCA)

    @property
    def RCA38(self):
        return self.__get_decoder(RCA38)

    @property
    def RCA38Old(self):
        return self.__get_decoder(RCA38Old)

    @property
    def RCAOld(self):
        return self.__get_decoder(RCAOld)

    @property
    def RECS800045(self):
        return self.__get_decoder(RECS800045)

    @property
    def RECS800068(self):
        return self.__get_decoder(RECS800068)

    @property
    def RECS800090(self):
        return self.__get_decoder(RECS800090)

    @property
    def Revox(self):
        return self.__get_decoder(Revox)

    @property
    def Roku(self):
        return self.__get_decoder(Roku)

    @property
    def Rs200(self):
        return self.__get_decoder(Rs200)

    @property
    def RTIRelay(self):
        return self.__get_decoder(RTIRelay)

    @property
    def Sampo(self):
        return self.__get_decoder(Sampo)

    @property
    def Samsung20(self):
        return self.__get_decoder(Samsung20)

    @property
    def Samsung36(self):
        return self.__get_decoder(Samsung36)

    @property
    def SamsungSMTG(self):
        return self.__get_decoder(SamsungSMTG)

    @property
    def ScAtl6(self):
        return self.__get_decoder(ScAtl6)

    @property
    def Sejin138(self):
        return self.__get_decoder(Sejin138)

    @property
    def Sejin156(self):
        return self.__get_decoder(Sejin156)

    @property
    def Sharp(self):
        return self.__get_decoder(Sharp)

    @property
    def Sharp1(self):
        return self.__get_decoder(Sharp1)

    @property
    def Sharp2(self):
        return self.__get_decoder(Sharp2)

    @property
    def SharpDVD(self):
        return self.__get_decoder(SharpDVD)

    @property
    def SIM2(self):
        return self.__get_decoder(SIM2)

    @property
    def Sky(self):
        return self.__get_decoder(Sky)

    @property
    def SkyHD(self):
        return self.__get_decoder(SkyHD)

    @property
    def SkyPlus(self):
        return self.__get_decoder(SkyPlus)

    @property
    def Somfy(self):
        return self.__get_decoder(Somfy)

    @property
    def Sony12(self):
        return self.__get_decoder(Sony12)

    @property
    def Sony15(self):
        return self.__get_decoder(Sony15)

    @property
    def Sony20(self):
        return self.__get_decoder(Sony20)

    @property
    def Sony8(self):
        return self.__get_decoder(Sony8)

    @property
    def StreamZap(self):
        return self.__get_decoder(StreamZap)

    @property
    def StreamZap57(self):
        return self.__get_decoder(StreamZap57)

    @property
    def Sunfire(self):
        return self.__get_decoder(Sunfire)

    @property
    def TDC38(self):
        return self.__get_decoder(TDC38)

    @property
    def TDC56(self):
        return self.__get_decoder(TDC56)

    @property
    def TeacK(self):
        return self.__get_decoder(TeacK)

    @property
    def Thomson(self):
        return self.__get_decoder(Thomson)

    @property
    def Thomson7(self):
        return self.__get_decoder(Thomson7)

    @property
    def Tivo(self):
        return self.__get_decoder(Tivo)

    @property
    def Velleman(self):
        return self.__get_decoder(Velleman)

    @property
    def Viewstar(self):
        return self.__get_decoder(Viewstar)

    @property
    def Whynter(self):
        return self.__get_decoder(Whynter)

    @property
    def Zaptor36(self):
        return self.__get_decoder(Zaptor36)

    @property
    def Zaptor56(self):
        return self.__get_decoder(Zaptor56)

    @property
    def XBox360(self):
        return self.__get_decoder(XBox360)

    @property
    def XBoxOne(self):
        return self.__get_decoder(XBoxOne)
