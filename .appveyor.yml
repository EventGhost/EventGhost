# In AppVeyor's web config add an environment variable named GITHUB_TOKEN.
# Set it to a token you've created on GitHub.
# To draft a release on GitHub with AppVeyor, create a tag on master.

version: '{build}-{branch}'

image: Visual Studio 2015

#init:
#  # Enable Remotedesktop and pause the build execution
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

clone_depth: 2

environment:
  PYTHON: 'C:\Stackless27'
  PYTHONPATH: 'C:\Stackless27;C:\Stackless27\Scripts;C:\Stackless27\DLLs;C:\Stackless27\Lib;C:\Stackless27\Lib\site-packages;'

matrix:
  fast_finish: true

cache:
  # Invalidate cache if .appveyor.yml has changed
  - C:\stackless27 -> .appveyor.yml

  # Manually clear cache:
  # from agithub.AppVeyor import AppVeyor
  # ci = AppVeyor(<your appveyor API token>)
  # status, data = ci.api.projects.<appveyor username>.<appveyor projectname>.buildcache.delete()
  # print status  # 204 = Ok, cache deleted

install:
  # HTML Help Workshop 1.32
  # - cinst html-help-workshop

  # Microsoft Visual C++ Redistributable 2008 (version min: 9.0.21022.8)
  # - cinst vcredist2008

  #- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
  - ps: |
      $Env:PATH = $Env:PATH -replace "python27", "stackless27"
      $PythonFolder = "c:\stackless27"
      $PythonScripts = $PythonFolder + "\Scripts"
      $SitePackages = $PythonFolder + "\lib\site-packages"
      $SysWOW = $Env:SYSTEMROOT + "\SysWOW64"
      $PythonWindowsDLL = $SysWOW + "\python27.dll"
      $PythonDLL = $PythonFolder + "\python27.dll"
      $InstallersFolder = $Env:APPVEYOR_BUILD_FOLDER + "\_build\installers\"

      Remove-Item $PythonWindowsDLL
      New-Item $InstallersFolder -type directory | Out-Null
      " "
      "=============== prepare EventGhost build environment ==============="
      If (-not (Test-Path $PythonFolder))
      {
        Function Execute ($command)
        {
          $result = $(cmd /c "$command  2>&1")
          If ($result) { "    " + "$result" }
        }

        Function PySl ($command)
        {
          $cmmd = "$PythonFolder\python.exe " + $command
          Execute "$cmmd"
        }

        Function PipInstall ($msg, $mod)
        {
          " "
          "--- " + $msg
          "    Installing..."
          $cmmd = "-m pip install -q --disable-pip-version-check --no-python-version-warning " + $mod
          PySl $cmmd
          "    Done."
        }

        " "
        "--- Stackless 2.7.16150 x86"
        $StacklessInstaller = $InstallersFolder + "python-2.7.12150-stackless.msi"
        $StacklessInstallDir = "TARGETDIR=" + $PythonFolder
        $StacklessURL = "http://www.stackless.com/binaries/python-2.7.16150-stackless.msi"
        Start-FileDownload $StacklessURL -Timeout 60000 -FileName $StacklessInstaller
        "    Installing..."
        Execute "MsiExec.exe /I $StacklessInstaller /quiet /passive /norestart /qn TARGETDIR=c:\stackless27"
        "    Done."
        " "
        "--- wxPython 3.0.2.0"
        $WXInstaller = $InstallersFolder + "wxPython3.0-win32-3.0.2.0-py27.exe"
        $WXURL = "http://downloads.sourceforge.net/wxpython/wxPython3.0-win32-3.0.2.0-py27.exe"
        Start-FileDownload $WXURL -Timeout 60000 -FileName $WXInstaller
        "    Installing..."
        Execute "$WXInstaller /VERYSILENT /SUPPRESSMSGBOXES"
        "    Done."
        " "
        "--- pip 20.3.4"
        $PIP_URL = "https://files.pythonhosted.org/packages/27/79/8a850fe3496446ff0d584327ae44e7500daf6764ca1a382d2d02789accf7/pip-20.3.4-py2.py3-none-any.whl#sha256=217ae5161a0e08c0fb873858806e3478c9775caffce5168b50ec885e358c199d"
        Start-FileDownload $PIP_URL -Timeout 60000
        "    Updating..."
        PySl '-m pip install --disable-pip-version-check -q -U .\pip-20.3.4-py2.py3-none-any.whl'
        "    Done."
        " "
        "--- setuptools 44.1.1"
        "    Updating..."
        PySl '-m pip install --disable-pip-version-check --no-python-version-warning -q -U "setuptools==44.1.1"'
        "    Done."
        PipInstall "wheel 0.37.1" "wheel==0.37.1"
        PipInstall "Jinja2 2.8.1" "jinja2==2.8.1"
        PipInstall "sphinx 1.8.6" "sphinx==1.8.6"
        PipInstall "commonmark 0.9.1" "commonmark==0.9.1"
        PipInstall "pillow 6.2.2" "pillow==6.2.2"
        PipInstall "py2exe 0.6.9" "py2exe_py2==0.6.9"
        PipInstall "PyCrypto 2.6.1" "PyCrypto==2.6.1"
        PipInstall "comtypes 1.2.1" "comtypes==1.2.1"
        PipInstall "ctypeslib 0.5.8" "ctypeslib3==0.5.8"
        PipInstall "paramiko 2.12.0" "paramiko==2.12.0"
        PipInstall "pywin32 228" pywin32==228
      }
      " "
      "--- pywin32 post install"
      $PywinPostInstall = $PythonScripts +"\pywin32_postinstall.py"
      PySl "$PywinPostInstall -install -silent -quiet"
      "    Done."
      " "
      "--- Inno Setup 6.4.0"
      $InnoInstaller = $InstallersFolder + "innosetup-6.4.0.exe"
      $InnoURL = "https://files.innosetup.nl/innosetup-6.4.0.exe"
      Start-FileDownload $InnoURL -Timeout 60000 -FileName $InnoInstaller | ForEach-Object { Write-Host "    " + $_ }
      "    Installing..."
      Execute "$InnoInstaller /SP /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /RESTARTAPPLICATIONS /NOICONS"
      "    Done."
      " "
      " "
      "=============== start the EventGhost build ==============="
      " "
      If ($Env:APPVEYOR_REPO_TAG.tolower() -eq "true" -and
        $Env:APPVEYOR_REPO_TAG_NAME.tolower().startswith("deploy"))
      {
        "--- DEPLOY ---"
        # to do a release, create a tag in the form "Deploy_VERSION"
        # VERSION must be a valid version string (without leading 'v')
        # this tag will be deleted and a new release "vVERSION" created.
        git checkout -q master
        $release = $Env:APPVEYOR_REPO_TAG_NAME.split("_", 2)[1]
        $url = if($Env:SFTP_URL){' --docs --url "' + $env:SFTP_URL + '"'} else {''}
        PySl "_build\Build.py --build --package --release --version $release $url"
      } Else {
        "--- WIP ---"
        PySl "_build\Build.py --build --package"
        Execute ".\EventGhost.exe -install"
      }
      $Env:SetupExe = gci -recurse -filter "_build\output\*Setup.exe" -name

      # update the appveyor build version to be the same as the EventGhost version
      $start = $env:SetupExe.IndexOf("_")
      $length = $env:SetupExe.LastIndexOf("_") - $start
      $build_version = $env:SetupExe.Substring($start + 1, $length - 1)
      Update-AppveyorBuild -Version "$build_version"

      # Make sure the appveyor cache is only saved if our build was successfull
      If (-Not (Test-Path(".\EventGhost.exe"))) {
        $env:APPVEYOR_CACHE_SKIP_SAVE = "true"
      }

      " "

      "=============== EventGhost build finished ==============="
      " "
      " "


build:
  off
  # If we don't turn build off, we get an error from appveyor telling us,
  # we should decide, which project or solution file to use, because the
  # folder contains more than one project or solution file.
  # We don't really "build" (with a compiler), but Appveyor finds the
  # solution files in the extension sub-directories and complains.


#after_test:
#  - cmd:  echo "=============== EventGhost build finished ==============="
#  # - cmd: START /WAIT %setup-exe% /VERYSILENT /SUPPRESSMSGBOXES /NOCLOSEAPPLICATIONS


artifacts:
  - path: _build\output\$(SetupExe)
    name: $(SetupExe)
  - path: _build\output\Build.log
    name: Build.log
  - path: _build\output\CHANGELOG.md
    name: CHANGELOG.md
  - path: _build\output\CHANGELOG_THIS_RELEASE.md
    name: CHANGELOG_THIS_RELEASE.md
  - path: _build\output\CHANGELOG_THIS_RELEASE.bb
    name: CHANGELOG_THIS_RELEASE.bb


notifications:
- provider: GitHubPullRequest
  template: >-
    [{{buildVersion}} {{status}}]({{buildUrl}}) (commit {{commitUrl}})

    Artifacts:

    {{#jobs}}
    {{#artifacts}}
    [{{name}}]({{permalink}})

    {{/artifacts}}
    {{/jobs}}

  on_build_success: true
  on_build_failure: true
  on_build_status_changed: false


# on_finish:
#   # Enable Remotedesktop and pause the build execution
#   - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))


# notifications:
#   - provider: GitHubPullRequest
#     template: "{{#passed}}:white_check_mark: [Setup.exe](https://ci.appveyor.com/api/buildjobs/$(APPVEYOR_JOB_ID)/artifacts/_build%2Foutput%2F$(setup-exe)){{/passed}}{{#failed}}:x:{{/failed}} [Build {{&projectName}} {{buildVersion}} {{status}}]({{buildUrl}}) (commit {{commitUrl}} by @{{&commitAuthorUsername}})"
